import okhttp3.*;
import org.json.JSONArray;
import org.json.JSONObject;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updates.DeleteWebhook;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.io.*;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class TelegramArticleBot extends TelegramLongPollingBot {

    // =============== –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó –•–ê–†–î–ö–û–î–ê ================
    private static final String BOT_TOKEN = System.getenv("BOT_TOKEN");
    private static final String BOT_USERNAME = System.getenv("BOT_USERNAME");
    private static final String N8N_WEBHOOK_URL = System.getenv("N8N_WEBHOOK_URL");
    private static final String CHANNEL_ID = System.getenv("CHANNEL_ID");
    private static final String GOOGLE_DOCS_URL = System.getenv("GOOGLE_DOCS_URL");

    // Enums –¥–ª—è —Ç–∏–ø–æ–≤
    private enum ActionType { GENERATE, REWRITE }
    private enum LengthType { SHORT, MEDIUM, LONG }
    private enum StyleType { STORYTELLING, EXPERT, DIGEST }
    private enum InputType { TEXT, VOICE }

    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–≤–æ–¥–∞
    private static class InputData {
        String content;        // –¢–µ–∫—Å—Ç –∏–ª–∏ base64 –∞—É–¥–∏–æ
        InputType type;       // –¢–∏–ø –≤–≤–æ–¥–∞
        byte[] audioData;     // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ (–µ—Å–ª–∏ –≥–æ–ª–æ—Å)

        InputData(String content, InputType type) {
            this.content = content;
            this.type = type;
        }

        InputData(String content, InputType type, byte[] audioData) {
            this.content = content;
            this.type = type;
            this.audioData = audioData;
        }
    }

    // –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private static class UserState {
        ActionType action;
        LengthType length;
        StyleType style;

        // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Ö—Ä–∞–Ω–∏–º –¥–≤–∞ –≤–≤–æ–¥–∞
        InputData topicInput;        // –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ (—Ç–µ–º–∞)
        InputData descriptionInput;   // –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ (–æ–ø–∏—Å–∞–Ω–∏–µ)

        // –î–ª—è —Ä–µ—Ä–∞–π—Ç–∞
        InputData originalInput;      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        InputData feedbackInput;      // –§–∏–¥–±–µ–∫

        boolean isProcessing = false;
        long lastActivityTime = System.currentTimeMillis();

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        boolean isReadyForGeneration() {
            return action == ActionType.GENERATE &&
                    topicInput != null &&
                    descriptionInput != null;
        }

        boolean isReadyForRewrite() {
            return action == ActionType.REWRITE &&
                    originalInput != null &&
                    feedbackInput != null;
        }

        void updateActivity() {
            lastActivityTime = System.currentTimeMillis();
        }
    }

    // –ö–ª–∞—Å—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    private static class ArticleResult {
        String text;
        String documentUrl;
        boolean success;

        ArticleResult(String text, boolean success) {
            this.text = text;
            this.success = success;
            this.documentUrl = GOOGLE_DOCS_URL;
        }
    }

    private final Map<Long, UserState> states = new HashMap<>();
    private final Map<Long, ArticleResult> lastResults = new HashMap<>();
    private final Set<Long> greeted = new HashSet<>();

    private final OkHttpClient http = new OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(30, TimeUnit.SECONDS)
            .readTimeout(5, TimeUnit.MINUTES)
            .build();

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    private final ReplyKeyboardMarkup mainMenuKeyboard;
    {
        mainMenuKeyboard = new ReplyKeyboardMarkup();
        mainMenuKeyboard.setResizeKeyboard(true);
        mainMenuKeyboard.setOneTimeKeyboard(false);
        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"));
        row.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"));
        List<KeyboardRow> rows = new ArrayList<>();
        rows.add(row);
        mainMenuKeyboard.setKeyboard(rows);
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            // –ö–æ–º–∞–Ω–¥–∞ /start
            if (update.hasMessage() && update.getMessage().hasText()) {
                String text = update.getMessage().getText();
                if ("/start".equals(text)) {
                    long chatId = update.getMessage().getChatId();
                    resetUserState(chatId);
                    sendWelcomeMessage(chatId);
                    sendActionChoice(chatId);
                    return;
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
            if (update.hasCallbackQuery()) {
                handleCallback(update.getCallbackQuery());
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage()) {
                Message message = update.getMessage();
                long chatId = message.getChatId();

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                if (message.hasText()) {
                    String text = message.getText();
                    if ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
                        resetUserState(chatId);
                        sendActionChoice(chatId);
                        return;
                    }
                    if ("‚ùå –û—Ç–º–µ–Ω–∞".equals(text)) {
                        resetUserState(chatId);
                        sendText(chatId, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                        sendActionChoice(chatId);
                        return;
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                UserState state = states.get(chatId);
                if (state == null) {
                    if (!greeted.contains(chatId)) {
                        sendWelcomeMessage(chatId);
                        greeted.add(chatId);
                    }
                    sendActionChoice(chatId);
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                state.updateActivity();

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if (message.hasVoice()) {
                    handleVoiceInput(message, state);
                }
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                else if (message.hasText()) {
                    handleTextInput(message, state);
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
     */
    private void handleTextInput(Message message, UserState state) {
        long chatId = message.getChatId();
        String text = message.getText();

        if (state.isProcessing) {
            sendText(chatId, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º InputData –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        InputData input = new InputData(text, InputType.TEXT);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        processInput(chatId, state, input);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
     */
    private void handleVoiceInput(Message message, UserState state) {
        long chatId = message.getChatId();

        if (state.isProcessing) {
            sendText(chatId, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...");
            return;
        }

        sendText(chatId, "üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—é...");

        try {
            // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
            Voice voice = message.getVoice();
            GetFile getFile = new GetFile();
            getFile.setFileId(voice.getFileId());

            org.telegram.telegrambots.meta.api.objects.File file = execute(getFile);
            String fileUrl = "https://api.telegram.org/file/bot" + BOT_TOKEN + "/" + file.getFilePath();

            Request request = new Request.Builder().url(fileUrl).build();
            byte[] audioData;

            try (Response response = http.newCall(request).execute()) {
                if (!response.isSuccessful() || response.body() == null) {
                    throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª");
                }
                audioData = response.body().bytes();
            }

            // –°–æ–∑–¥–∞–µ–º InputData –¥–ª—è –≥–æ–ª–æ—Å–∞
            String base64Audio = Base64.getEncoder().encodeToString(audioData);
            InputData input = new InputData(base64Audio, InputType.VOICE, audioData);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
            processInput(chatId, state, input);

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: " + e.getMessage());
            sendText(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
     */
    private void processInput(long chatId, UserState state, InputData input) {
        // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
        if (state.action == ActionType.GENERATE) {
            // –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ - —Ç–µ–º–∞
            if (state.topicInput == null) {
                state.topicInput = input;

                String inputTypeText = input.type == InputType.VOICE ?
                        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–º–∞)" : "üìù –¢–µ–∫—Å—Ç (—Ç–µ–º–∞)";

                sendText(chatId,
                        "‚úÖ –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω: " + inputTypeText + "\n\n" +
                                "2Ô∏è‚É£ –®–∞–≥ 2 –∏–∑ 2: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–ü–ò–°–ê–ù–ò–ï —Ç–µ–º—ã\n" +
                                "üé§ –ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                                "üìù –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º\n\n" +
                                "–≠—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –æ —á–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç—å—è");
                return;
            }

            // –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ - –æ–ø–∏—Å–∞–Ω–∏–µ
            if (state.descriptionInput == null) {
                state.descriptionInput = input;

                String inputTypeText = input.type == InputType.VOICE ?
                        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø–∏—Å–∞–Ω–∏–µ)" : "üìù –¢–µ–∫—Å—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ)";

                sendText(chatId, "‚úÖ –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω: " + inputTypeText);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                if (state.isReadyForGeneration()) {
                    processGeneration(chatId, state);
                }
                return;
            }
        }

        // –î–ª—è —Ä–µ—Ä–∞–π—Ç–∞
        if (state.action == ActionType.REWRITE) {
            // –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if (state.originalInput == null) {
                state.originalInput = input;

                String inputTypeText = input.type == InputType.VOICE ?
                        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª)" : "üìù –¢–µ–∫—Å—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª)";

                sendText(chatId,
                        "‚úÖ –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω: " + inputTypeText + "\n\n" +
                                "2Ô∏è‚É£ –®–∞–≥ 2 –∏–∑ 2: –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n" +
                                "üé§ –ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                                "üìù –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º");
                return;
            }

            // –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ - —Ñ–∏–¥–±–µ–∫
            if (state.feedbackInput == null) {
                state.feedbackInput = input;

                String inputTypeText = input.type == InputType.VOICE ?
                        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∞–≤–∫–∏)" : "üìù –¢–µ–∫—Å—Ç (–ø—Ä–∞–≤–∫–∏)";

                sendText(chatId, "‚úÖ –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω: " + inputTypeText);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                if (state.isReadyForRewrite()) {
                    processRewrite(chatId, state);
                }
                return;
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ –æ–±–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã
     */
    private void processGeneration(long chatId, UserState state) {
        state.isProcessing = true;

        sendText(chatId,
                "üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" +
                        "‚Ä¢ –¢–µ–º–∞: " + (state.topicInput.type == InputType.VOICE ? "üé§ –ì–æ–ª–æ—Å" : "üìù –¢–µ–∫—Å—Ç") + "\n" +
                        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: " + (state.descriptionInput.type == InputType.VOICE ? "üé§ –ì–æ–ª–æ—Å" : "üìù –¢–µ–∫—Å—Ç") + "\n" +
                        "‚Ä¢ –î–ª–∏–Ω–∞: " + getLengthDescription(state.length) + "\n" +
                        "‚Ä¢ –°—Ç–∏–ª—å: " + getStyleDescription(state.style) + "\n\n" +
                        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...");

        try {
            JSONObject payload = new JSONObject();
            payload.put("chat_id", chatId);
            payload.put("action", "generate");
            payload.put("length", getLengthString(state.length));
            payload.put("style", getStyleString(state.style));

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–µ
            JSONObject topicData = new JSONObject();
            topicData.put("type", state.topicInput.type.toString());
            topicData.put("content", state.topicInput.content);
            payload.put("topic_data", topicData);

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–∏—Å–∞–Ω–∏–∏
            JSONObject descData = new JSONObject();
            descData.put("type", state.descriptionInput.type.toString());
            descData.put("content", state.descriptionInput.content);
            payload.put("description_data", descData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N
            ArticleResult result = callN8n(payload);
            handleArticleResult(chatId, result);

        } catch (Exception e) {
            handleError(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏", e);
        } finally {
            state.isProcessing = false;
            states.remove(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞ –∫–æ–≥–¥–∞ –æ–±–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã
     */
    private void processRewrite(long chatId, UserState state) {
        state.isProcessing = true;

        sendText(chatId,
                "üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" +
                        "‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª: " + (state.originalInput.type == InputType.VOICE ? "üé§ –ì–æ–ª–æ—Å" : "üìù –¢–µ–∫—Å—Ç") + "\n" +
                        "‚Ä¢ –ü—Ä–∞–≤–∫–∏: " + (state.feedbackInput.type == InputType.VOICE ? "üé§ –ì–æ–ª–æ—Å" : "üìù –¢–µ–∫—Å—Ç") + "\n" +
                        "‚Ä¢ –î–ª–∏–Ω–∞: " + getLengthDescription(state.length) + "\n" +
                        "‚Ä¢ –°—Ç–∏–ª—å: " + getStyleDescription(state.style) + "\n\n" +
                        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...");

        try {
            JSONObject payload = new JSONObject();
            payload.put("chat_id", chatId);
            payload.put("action", "rewrite");
            payload.put("length", getLengthString(state.length));
            payload.put("style", getStyleString(state.style));

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            JSONObject originalData = new JSONObject();
            originalData.put("type", state.originalInput.type.toString());
            originalData.put("content", state.originalInput.content);
            payload.put("original_data", originalData);

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–¥–±–µ–∫–µ
            JSONObject feedbackData = new JSONObject();
            feedbackData.put("type", state.feedbackInput.type.toString());
            feedbackData.put("content", state.feedbackInput.content);
            payload.put("feedback_data", feedbackData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N
            ArticleResult result = callN8n(payload);
            handleArticleResult(chatId, result);

        } catch (Exception e) {
            handleError(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–∞–π—Ç–µ", e);
        } finally {
            state.isProcessing = false;
            states.remove(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
     */
    private void handleCallback(CallbackQuery callback) {
        long chatId = callback.getMessage().getChatId();
        String data = callback.getData();

        try {
            DeleteMessage deleteMessage = new DeleteMessage(
                    String.valueOf(chatId),
                    callback.getMessage().getMessageId()
            );
            execute(deleteMessage);

            UserState state = states.get(chatId);

            switch (data) {
                case "ACT_GEN":
                    state = new UserState();
                    state.action = ActionType.GENERATE;
                    states.put(chatId, state);
                    sendLengthChoice(chatId);
                    break;

                case "ACT_REW":
                    state = new UserState();
                    state.action = ActionType.REWRITE;
                    states.put(chatId, state);
                    sendLengthChoice(chatId);
                    break;

                case "LEN_SHORT":
                    if (state != null) {
                        state.length = LengthType.SHORT;
                        sendStyleChoice(chatId);
                    }
                    break;

                case "LEN_MEDIUM":
                    if (state != null) {
                        state.length = LengthType.MEDIUM;
                        sendStyleChoice(chatId);
                    }
                    break;

                case "LEN_LONG":
                    if (state != null) {
                        state.length = LengthType.LONG;
                        sendStyleChoice(chatId);
                    }
                    break;

                case "STYLE_STORY":
                    if (state != null) {
                        state.style = StyleType.STORYTELLING;
                        startArticleCreation(chatId, state);
                    }
                    break;

                case "STYLE_EXPERT":
                    if (state != null) {
                        state.style = StyleType.EXPERT;
                        startArticleCreation(chatId, state);
                    }
                    break;

                case "STYLE_DIGEST":
                    if (state != null) {
                        state.style = StyleType.DIGEST;
                        startArticleCreation(chatId, state);
                    }
                    break;

                case "PUBLISH":
                    ArticleResult lastResult = lastResults.get(chatId);
                    if (lastResult != null && CHANNEL_ID != null) {
                        publishToChannel(lastResult.text);
                        sendText(chatId, "‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª!");
                    } else {
                        sendText(chatId, "‚ùå –ù–µ—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                    }
                    sendActionChoice(chatId);
                    break;

                case "MAIN_MENU":
                    resetUserState(chatId);
                    sendActionChoice(chatId);
                    break;
            }

        } catch (Exception e) {
            handleError(chatId, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã", e);
        }
    }

    /**
     * –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
     */
    private void startArticleCreation(long chatId, UserState state) {
        String params = String.format(
                "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞—Ç—å–∏:\n" +
                        "‚Ä¢ –î–ª–∏–Ω–∞: %s\n" +
                        "‚Ä¢ –°—Ç–∏–ª—å: %s\n\n",
                getLengthDescription(state.length),
                getStyleDescription(state.style)
        );

        if (state.action == ActionType.GENERATE) {
            sendText(chatId, params +
                    "üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–¨–ò\n\n" +
                    "1Ô∏è‚É£ –®–∞–≥ 1 –∏–∑ 2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–ï–ú–£ —Å—Ç–∞—Ç—å–∏\n" +
                    "üé§ –ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                    "üìù –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º\n\n" +
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: '–í–ª–∏—è–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—É'");
        } else {
            sendText(chatId, params +
                    "‚úèÔ∏è –†–ï–†–ê–ô–¢ –¢–ï–ö–°–¢–ê\n\n" +
                    "1Ô∏è‚É£ –®–∞–≥ 1 –∏–∑ 2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô —Ç–µ–∫—Å—Ç\n" +
                    "üé§ –ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                    "üìù –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å/–≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç");
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private String cleanText(String text) {
        if (text == null || text.isEmpty()) {
            return text;
        }

        // –£–±–∏—Ä–∞–µ–º escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        text = text.replace("\\n", "\n")
                .replace("\\\"", "\"")
                .replace("\\'", "'")
                .replace("\\\\", "\\");

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram
        text = text.replaceAll("^#{1,2}\\s+(.+)$", "**$1**"); // H1-H2 –≤ bold
        text = text.replaceAll("^#{3,6}\\s+(.+)$", "_$1_");   // H3-H6 –≤ italic

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤
        text = text.replaceAll("^\\s*[-*]\\s+", "‚Ä¢ "); // –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        text = text.replaceAll("^\\s*(\\d+)\\.\\s+", "$1. "); // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏

        // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = text.replaceAll("\\s{2,}", " ")
                .replaceAll("\n{3,}", "\n\n");

        // –£–±–∏—Ä–∞–µ–º markdown —Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        text = text.replaceAll("\\[([^\\]]+)\\]\\([^)]+\\)", "$1");

        return text.trim();
    }

    /**
     * –û–±—â–∏–π –º–µ—Ç–æ–¥ –≤—ã–∑–æ–≤–∞ N8N
     */
    private ArticleResult callN8n(JSONObject payload) {
        try {
            System.out.println("‚Üí N8N request: " + payload.toString(2));

            RequestBody body = RequestBody.create(
                    payload.toString(),
                    MediaType.parse("application/json; charset=utf-8")
            );

            Request request = new Request.Builder()
                    .url(N8N_WEBHOOK_URL)
                    .post(body)
                    .build();

            try (Response response = http.newCall(request).execute()) {
                String responseBody = response.body() != null ? response.body().string() : "";
                System.out.println("‚Üê N8N response: " + responseBody);

                if (!response.isSuccessful() || responseBody.isEmpty()) {
                    return new ArticleResult("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", false);
                }

                // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                try {
                    JSONObject json = new JSONObject(responseBody);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –≥–æ—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
                    if (json.has("status") && json.getString("status").equals("processing")) {
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                        return new ArticleResult("PROCESSING", true);
                    }

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    String articleText = "";

                    if (json.has("text")) {
                        articleText = json.getString("text");
                    }

                    if (json.has("title")) {
                        String title = json.getString("title");
                        articleText = "üìù **" + title + "**\n\n" + articleText;
                    }

                    if (articleText.isEmpty()) {
                        // –ï—Å–ª–∏ –Ω–µ—Ç text –∏–ª–∏ title, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        return new ArticleResult(cleanText(responseBody), true);
                    }

                    return new ArticleResult(cleanText(articleText), true);

                } catch (Exception e) {
                    // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ plain text
                    return new ArticleResult(cleanText(responseBody), true);
                }

            }

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ N8N: " + e.getMessage());
            return new ArticleResult("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private void handleArticleResult(long chatId, ArticleResult result) {
        if (result.success) {
            String text = result.text;

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "PROCESSING"
            if ("PROCESSING".equals(text)) {
                sendText(chatId, "‚è≥ –°—Ç–∞—Ç—å—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—å—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.");

                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                // –∏–ª–∏ webhook –æ—Ç N8N —Å –≥–æ—Ç–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ–π
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            lastResults.put(chatId, result);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–ë–ï–ó Google Docs)
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            // –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if (CHANNEL_ID != null) {
                List<InlineKeyboardButton> row1 = new ArrayList<>();
                InlineKeyboardButton publishBtn = new InlineKeyboardButton();
                publishBtn.setText("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª");
                publishBtn.setCallbackData("PUBLISH");
                row1.add(publishBtn);
                rows.add(row1);
            }

            // –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton menuBtn = new InlineKeyboardButton();
            menuBtn.setText("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
            menuBtn.setCallbackData("MAIN_MENU");
            row2.add(menuBtn);
            rows.add(row2);

            keyboard.setKeyboard(rows);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));

            // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if (text.length() > 4096) {
                // Telegram limit is 4096 characters
                text = text.substring(0, 4000) + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)";
            }

            message.setText("‚úÖ –°—Ç–∞—Ç—å—è –≥–æ—Ç–æ–≤–∞!\n\n" + text);
            message.setReplyMarkup(keyboard);
            message.setParseMode("Markdown"); // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown

            try {
                execute(message);
            } catch (Exception e) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ Markdown –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                message.setParseMode(null);
                message.setText("‚úÖ –°—Ç–∞—Ç—å—è –≥–æ—Ç–æ–≤–∞!\n\n" + text.replaceAll("[*_`\\[\\]]", ""));
                try {
                    execute(message);
                } catch (Exception ex) {
                    sendText(chatId, "‚úÖ –°—Ç–∞—Ç—å—è –≥–æ—Ç–æ–≤–∞, –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é.");
                }
            }
        } else {
            sendText(chatId, "‚ùå " + result.text);
            sendActionChoice(chatId);
        }
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
     */
    private void publishToChannel(String text) {
        if (CHANNEL_ID == null || CHANNEL_ID.isEmpty()) {
            return;
        }

        try {
            SendMessage message = new SendMessage();
            message.setChatId(CHANNEL_ID);

            if (text.length() > 4000) {
                text = text.substring(0, 3900) + "...\n\nüìÑ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—Ç–µ";
            }

            message.setText(text);
            execute(message);

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: " + e.getMessage());
        }
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    private void sendWelcomeMessage(long chatId) {
        String welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SEO Article Bot!\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.\n\n" +
                "üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n" +
                "1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Ä–µ—Ä–∞–π—Ç)\n" +
                "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª–∏–Ω–∞ –∏ —Å—Ç–∏–ª—å)\n" +
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è:\n" +
                "   ‚Ä¢ –ü–µ—Ä–≤–æ–µ - —Ç–µ–º–∞/–æ—Ä–∏–≥–∏–Ω–∞–ª\n" +
                "   ‚Ä¢ –í—Ç–æ—Ä–æ–µ - –æ–ø–∏—Å–∞–Ω–∏–µ/–ø—Ä–∞–≤–∫–∏\n\n" +
                "üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n" +
                "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" +
                "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" +
                "‚Ä¢ –õ—é–±—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é!";

        sendText(chatId, welcome);
    }

    private void sendActionChoice(long chatId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton genBtn = new InlineKeyboardButton();
        genBtn.setText("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é");
        genBtn.setCallbackData("ACT_GEN");
        row1.add(genBtn);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton rewBtn = new InlineKeyboardButton();
        rewBtn.setText("‚úèÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç");
        rewBtn.setCallbackData("ACT_REW");
        row2.add(rewBtn);

        rows.add(row1);
        rows.add(row2);
        keyboard.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: " + e.getMessage());
        }
    }

    private void sendLengthChoice(long chatId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        String[] options = {
                "üìÑ –ö–æ—Ä–æ—Ç–∫–∞—è (2000-3000 —Å–∏–º–≤–æ–ª–æ–≤)",
                "üìù –°—Ä–µ–¥–Ω—è—è (4000-5000 —Å–∏–º–≤–æ–ª–æ–≤)",
                "üìö –î–ª–∏–Ω–Ω–∞—è (5000+ —Å–∏–º–≤–æ–ª–æ–≤)"
        };
        String[] callbacks = {"LEN_SHORT", "LEN_MEDIUM", "LEN_LONG"};

        for (int i = 0; i < options.length; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton btn = new InlineKeyboardButton();
            btn.setText(options[i]);
            btn.setCallbackData(callbacks[i]);
            row.add(btn);
            rows.add(row);
        }

        keyboard.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üìè –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É —Å—Ç–∞—Ç—å–∏:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã: " + e.getMessage());
        }
    }

    private void sendStyleChoice(long chatId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        String[] options = {
                "üí¨ –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥",
                "üéì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
                "üì∞ –î–∞–π–¥–∂–µ—Å—Ç"
        };
        String[] callbacks = {"STYLE_STORY", "STYLE_EXPERT", "STYLE_DIGEST"};

        for (int i = 0; i < options.length; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton btn = new InlineKeyboardButton();
            btn.setText(options[i]);
            btn.setCallbackData(callbacks[i]);
            row.add(btn);
            rows.add(row);
        }

        keyboard.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è: " + e.getMessage());
        }
    }

    private void sendText(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(mainMenuKeyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void resetUserState(long chatId) {
        states.remove(chatId);
        lastResults.remove(chatId);
        System.out.println("State reset for chatId: " + chatId);
    }

    private String getLengthString(LengthType length) {
        if (length == null) return "4000-5000";
        switch (length) {
            case SHORT: return "2000-3000";
            case MEDIUM: return "4000-5000";
            case LONG: return "5000+";
            default: return "4000-5000";
        }
    }

    private String getStyleString(StyleType style) {
        if (style == null) return "storytelling";
        switch (style) {
            case STORYTELLING: return "storytelling";
            case EXPERT: return "expert";
            case DIGEST: return "digest";
            default: return "storytelling";
        }
    }

    private String getLengthDescription(LengthType length) {
        if (length == null) return "–°—Ä–µ–¥–Ω—è—è";
        switch (length) {
            case SHORT: return "–ö–æ—Ä–æ—Ç–∫–∞—è (2000-3000 —Å–∏–º–≤–æ–ª–æ–≤)";
            case MEDIUM: return "–°—Ä–µ–¥–Ω—è—è (4000-5000 —Å–∏–º–≤–æ–ª–æ–≤)";
            case LONG: return "–î–ª–∏–Ω–Ω–∞—è (5000+ —Å–∏–º–≤–æ–ª–æ–≤)";
            default: return "–°—Ä–µ–¥–Ω—è—è";
        }
    }

    private String getStyleDescription(StyleType style) {
        if (style == null) return "–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥";
        switch (style) {
            case STORYTELLING: return "–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ (–∂–∏–≤–æ–π —Ä–∞—Å—Å–∫–∞–∑)";
            case EXPERT: return "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞)";
            case DIGEST: return "–î–∞–π–¥–∂–µ—Å—Ç (–∫—Ä–∞—Ç–∫–∏–µ —Ñ–∞–∫—Ç—ã)";
            default: return "–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥";
        }
    }

    private void handleError(long chatId, String errorMessage, Exception e) {
        System.err.println("Error for chatId " + chatId + ": " + errorMessage);
        if (e != null) {
            e.printStackTrace();
        }

        sendText(chatId, "‚ùå " + errorMessage + "\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'");

        resetUserState(chatId);
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
    private void cleanupOldStates() {
        long now = System.currentTimeMillis();
        long timeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

        states.entrySet().removeIf(entry ->
                (now - entry.getValue().lastActivityTime) > timeout
        );
    }

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    // === Main –º–µ—Ç–æ–¥ ===
    public static void main(String[] args) {
        try {
            // –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•
            if (BOT_TOKEN == null || BOT_TOKEN.isEmpty()) {
                System.err.println("‚ùå ERROR: BOT_TOKEN environment variable is not set!");
                System.err.println("Please set the BOT_TOKEN variable in Railway.");
                System.exit(1);
            }

            if (BOT_USERNAME == null || BOT_USERNAME.isEmpty()) {
                System.err.println("‚ùå ERROR: BOT_USERNAME environment variable is not set!");
                System.err.println("Please set the BOT_USERNAME variable in Railway.");
                System.exit(1);
            }

            if (N8N_WEBHOOK_URL == null || N8N_WEBHOOK_URL.isEmpty()) {
                System.err.println("‚ùå ERROR: N8N_WEBHOOK_URL environment variable is not set!");
                System.err.println("Please set the N8N_WEBHOOK_URL variable in Railway.");
                System.exit(1);
            }

            System.out.println("=== Starting Telegram Bot ===");
            System.out.println("Username: " + BOT_USERNAME);
            System.out.println("N8N URL: Connected");
            System.out.println("Mode: Two-input collection");

            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            TelegramArticleBot bot = new TelegramArticleBot();

            try {
                DeleteWebhook deleteWebhook = new DeleteWebhook();
                bot.execute(deleteWebhook);
                System.out.println("‚úÖ Webhook —É–¥–∞–ª–µ–Ω");
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }

            botsApi.registerBot(bot);
            System.out.println("‚úÖ Bot started successfully!");
            System.out.println("üé§ Voice support: ENABLED");
            System.out.println("üìù Text support: ENABLED");
            System.out.println("‚ú® Mixed input: ENABLED");
            System.out.println("\nBot is ready! Send /start to begin");

            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            new Thread(() -> {
                while (true) {
                    try {
                        Thread.sleep(600000); // 10 –º–∏–Ω—É—Ç
                        bot.cleanupOldStates();
                        System.out.println("Old states cleaned up");
                    } catch (InterruptedException e) {
                        break;
                    }
                }
            }).start();

        } catch (Exception e) {
            System.err.println("‚ùå Failed to start bot:");
            e.printStackTrace();
            System.exit(1);
        }
    }
}
